// Code generated by bitproto. DO NOT EDIT.

package mk3

import (
	"strconv"
	"encoding/json"

	bp "github.com/hit9/bitproto/lib/go"
)

// Avoid possible golang import not used error
var formatInt = strconv.FormatInt
var jsonMarshal = json.Marshal
var _ = bp.Useless

type PadReport struct {
	Magic byte `json:"magic"` // 8bit
	Pad uint8 `json:"pad"` // 8bit
	Unknwn uint8 `json:"unknwn"` // 4bit
	Action uint8 `json:"action"` // 4bit
	Velocity uint8 `json:"velocity"` // 8bit
	Reserved [60]byte `json:"reserved"` // 480bit
}

// Number of bytes to serialize struct PadReport
const BYTES_LENGTH_PAD_REPORT uint32 = 64

func (m *PadReport) Size() uint32 { return 64 }

// Returns string representation for struct PadReport.
func (m *PadReport) String() string {
	v, _ := jsonMarshal(m)
	return string(v)
}

// Encode struct PadReport to bytes buffer.
func (m *PadReport) Encode() []byte {
	ctx := bp.NewEncodeContext(int(m.Size()))
	m.BpProcessor().Process(ctx, nil, m)
	return ctx.Buffer()
}

func (m *PadReport) Decode(s []byte) {
	ctx := bp.NewDecodeContext(s)
	m.BpProcessor().Process(ctx, nil, m)
}

func (m *PadReport) BpProcessor() bp.Processor {
	fieldDescriptors := []*bp.MessageFieldProcessor{
		bp.NewMessageFieldProcessor(1, bp.NewByte()),
		bp.NewMessageFieldProcessor(2, bp.NewUint(8)),
		bp.NewMessageFieldProcessor(3, bp.NewUint(4)),
		bp.NewMessageFieldProcessor(4, bp.NewUint(4)),
		bp.NewMessageFieldProcessor(5, bp.NewUint(8)),
		bp.NewMessageFieldProcessor(6, bp.NewArray(false, 60, bp.NewByte())),
	}
	return bp.NewMessageProcessor(false, 512, fieldDescriptors)
}

func (m *PadReport) BpGetAccessor(di *bp.DataIndexer) bp.Accessor {
	switch di.F() {
	default:
		return nil  // Won't reached
	}
}

func (m *PadReport) BpSetByte(di *bp.DataIndexer, lshift int, b byte) {
	switch di.F() {
		case 1:
			m.Magic |= (byte(b) << lshift)
		case 2:
			m.Pad |= (uint8(b) << lshift)
		case 3:
			m.Unknwn |= (uint8(b) << lshift)
		case 4:
			m.Action |= (uint8(b) << lshift)
		case 5:
			m.Velocity |= (uint8(b) << lshift)
		case 6:
			m.Reserved[di.I(0)] |= (byte(b) << lshift)
		default:
			return
	}
}

func (m *PadReport) BpGetByte(di *bp.DataIndexer, rshift int) byte {
	switch di.F() {
		case 1:
			return byte(m.Magic >> rshift)
		case 2:
			return byte(m.Pad >> rshift)
		case 3:
			return byte(m.Unknwn >> rshift)
		case 4:
			return byte(m.Action >> rshift)
		case 5:
			return byte(m.Velocity >> rshift)
		case 6:
			return byte(m.Reserved[di.I(0)] >> rshift)
		default:
			return byte(0) // Won't reached
	}
}

func (m *PadReport) BpProcessInt(di *bp.DataIndexer) {
	switch di.F() {
		default:
			return
	}
}

type ButtonReport struct {
	Magic byte `json:"magic"` // 8bit
	PressedButtons uint64 `json:"pressed_buttons"` // 40bit
	EncoderTouched bool `json:"encoder_touched"` // 1bit
	Reserved1 uint8 `json:"reserved1"` // 7bit
	EncoderValue uint8 `json:"encoder_value"` // 4bit
	Reserved2 uint8 `json:"reserved2"` // 4bit
	StripTime uint16 `json:"strip_time"` // 16bit
	StripValue1 uint8 `json:"strip_value1"` // 8bit
	Reserved3 byte `json:"reserved3"` // 8bit
	StripValue2 uint8 `json:"strip_value2"` // 8bit
	Reserved4 byte `json:"reserved4"` // 8bit
}

// Number of bytes to serialize struct ButtonReport
const BYTES_LENGTH_BUTTON_REPORT uint32 = 14

func (m *ButtonReport) Size() uint32 { return 14 }

// Returns string representation for struct ButtonReport.
func (m *ButtonReport) String() string {
	v, _ := jsonMarshal(m)
	return string(v)
}

// Encode struct ButtonReport to bytes buffer.
func (m *ButtonReport) Encode() []byte {
	ctx := bp.NewEncodeContext(int(m.Size()))
	m.BpProcessor().Process(ctx, nil, m)
	return ctx.Buffer()
}

func (m *ButtonReport) Decode(s []byte) {
	ctx := bp.NewDecodeContext(s)
	m.BpProcessor().Process(ctx, nil, m)
}

func (m *ButtonReport) BpProcessor() bp.Processor {
	fieldDescriptors := []*bp.MessageFieldProcessor{
		bp.NewMessageFieldProcessor(1, bp.NewByte()),
		bp.NewMessageFieldProcessor(2, bp.NewUint(40)),
		bp.NewMessageFieldProcessor(3, bp.NewBool()),
		bp.NewMessageFieldProcessor(4, bp.NewUint(7)),
		bp.NewMessageFieldProcessor(5, bp.NewUint(4)),
		bp.NewMessageFieldProcessor(6, bp.NewUint(4)),
		bp.NewMessageFieldProcessor(7, bp.NewUint(16)),
		bp.NewMessageFieldProcessor(8, bp.NewUint(8)),
		bp.NewMessageFieldProcessor(9, bp.NewByte()),
		bp.NewMessageFieldProcessor(10, bp.NewUint(8)),
		bp.NewMessageFieldProcessor(11, bp.NewByte()),
	}
	return bp.NewMessageProcessor(false, 112, fieldDescriptors)
}

func (m *ButtonReport) BpGetAccessor(di *bp.DataIndexer) bp.Accessor {
	switch di.F() {
	default:
		return nil  // Won't reached
	}
}

func (m *ButtonReport) BpSetByte(di *bp.DataIndexer, lshift int, b byte) {
	switch di.F() {
		case 1:
			m.Magic |= (byte(b) << lshift)
		case 2:
			m.PressedButtons |= (uint64(b) << lshift)
		case 3:
			m.EncoderTouched = bp.Byte2bool(b)
		case 4:
			m.Reserved1 |= (uint8(b) << lshift)
		case 5:
			m.EncoderValue |= (uint8(b) << lshift)
		case 6:
			m.Reserved2 |= (uint8(b) << lshift)
		case 7:
			m.StripTime |= (uint16(b) << lshift)
		case 8:
			m.StripValue1 |= (uint8(b) << lshift)
		case 9:
			m.Reserved3 |= (byte(b) << lshift)
		case 10:
			m.StripValue2 |= (uint8(b) << lshift)
		case 11:
			m.Reserved4 |= (byte(b) << lshift)
		default:
			return
	}
}

func (m *ButtonReport) BpGetByte(di *bp.DataIndexer, rshift int) byte {
	switch di.F() {
		case 1:
			return byte(m.Magic >> rshift)
		case 2:
			return byte(m.PressedButtons >> rshift)
		case 3:
			return bp.Bool2byte(m.EncoderTouched) >> rshift
		case 4:
			return byte(m.Reserved1 >> rshift)
		case 5:
			return byte(m.EncoderValue >> rshift)
		case 6:
			return byte(m.Reserved2 >> rshift)
		case 7:
			return byte(m.StripTime >> rshift)
		case 8:
			return byte(m.StripValue1 >> rshift)
		case 9:
			return byte(m.Reserved3 >> rshift)
		case 10:
			return byte(m.StripValue2 >> rshift)
		case 11:
			return byte(m.Reserved4 >> rshift)
		default:
			return byte(0) // Won't reached
	}
}

func (m *ButtonReport) BpProcessInt(di *bp.DataIndexer) {
	switch di.F() {
		default:
			return
	}
}

type ColoredLight struct {
	Intensity uint8 `json:"intensity"` // 2bit
	Color uint8 `json:"color"` // 6bit
}

// Number of bytes to serialize struct ColoredLight
const BYTES_LENGTH_COLORED_LIGHT uint32 = 1

func (m *ColoredLight) Size() uint32 { return 1 }

// Returns string representation for struct ColoredLight.
func (m *ColoredLight) String() string {
	v, _ := jsonMarshal(m)
	return string(v)
}

// Encode struct ColoredLight to bytes buffer.
func (m *ColoredLight) Encode() []byte {
	ctx := bp.NewEncodeContext(int(m.Size()))
	m.BpProcessor().Process(ctx, nil, m)
	return ctx.Buffer()
}

func (m *ColoredLight) Decode(s []byte) {
	ctx := bp.NewDecodeContext(s)
	m.BpProcessor().Process(ctx, nil, m)
}

func (m *ColoredLight) BpProcessor() bp.Processor {
	fieldDescriptors := []*bp.MessageFieldProcessor{
		bp.NewMessageFieldProcessor(1, bp.NewUint(2)),
		bp.NewMessageFieldProcessor(2, bp.NewUint(6)),
	}
	return bp.NewMessageProcessor(false, 8, fieldDescriptors)
}

func (m *ColoredLight) BpGetAccessor(di *bp.DataIndexer) bp.Accessor {
	switch di.F() {
	default:
		return nil  // Won't reached
	}
}

func (m *ColoredLight) BpSetByte(di *bp.DataIndexer, lshift int, b byte) {
	switch di.F() {
		case 1:
			m.Intensity |= (uint8(b) << lshift)
		case 2:
			m.Color |= (uint8(b) << lshift)
		default:
			return
	}
}

func (m *ColoredLight) BpGetByte(di *bp.DataIndexer, rshift int) byte {
	switch di.F() {
		case 1:
			return byte(m.Intensity >> rshift)
		case 2:
			return byte(m.Color >> rshift)
		default:
			return byte(0) // Won't reached
	}
}

func (m *ColoredLight) BpProcessInt(di *bp.DataIndexer) {
	switch di.F() {
		default:
			return
	}
}

type LightState struct {
	Magic byte `json:"magic"` // 8bit
	Buttons [39]ColoredLight `json:"buttons"` // 312bit
	Pads [16]ColoredLight `json:"pads"` // 128bit
	Strip [35]ColoredLight `json:"strip"` // 280bit
}

// Number of bytes to serialize struct LightState
const BYTES_LENGTH_LIGHT_STATE uint32 = 91

func (m *LightState) Size() uint32 { return 91 }

// Returns string representation for struct LightState.
func (m *LightState) String() string {
	v, _ := jsonMarshal(m)
	return string(v)
}

// Encode struct LightState to bytes buffer.
func (m *LightState) Encode() []byte {
	ctx := bp.NewEncodeContext(int(m.Size()))
	m.BpProcessor().Process(ctx, nil, m)
	return ctx.Buffer()
}

func (m *LightState) Decode(s []byte) {
	ctx := bp.NewDecodeContext(s)
	m.BpProcessor().Process(ctx, nil, m)
}

func (m *LightState) BpProcessor() bp.Processor {
	fieldDescriptors := []*bp.MessageFieldProcessor{
		bp.NewMessageFieldProcessor(1, bp.NewByte()),
		bp.NewMessageFieldProcessor(2, bp.NewArray(false, 39, (&ColoredLight{}).BpProcessor())),
		bp.NewMessageFieldProcessor(3, bp.NewArray(false, 16, (&ColoredLight{}).BpProcessor())),
		bp.NewMessageFieldProcessor(4, bp.NewArray(false, 35, (&ColoredLight{}).BpProcessor())),
	}
	return bp.NewMessageProcessor(false, 728, fieldDescriptors)
}

func (m *LightState) BpGetAccessor(di *bp.DataIndexer) bp.Accessor {
	switch di.F() {
	case 2:
		return &(m.Buttons[di.I(0)])
	case 3:
		return &(m.Pads[di.I(0)])
	case 4:
		return &(m.Strip[di.I(0)])
	default:
		return nil  // Won't reached
	}
}

func (m *LightState) BpSetByte(di *bp.DataIndexer, lshift int, b byte) {
	switch di.F() {
		case 1:
			m.Magic |= (byte(b) << lshift)
		default:
			return
	}
}

func (m *LightState) BpGetByte(di *bp.DataIndexer, rshift int) byte {
	switch di.F() {
		case 1:
			return byte(m.Magic >> rshift)
		default:
			return byte(0) // Won't reached
	}
}

func (m *LightState) BpProcessInt(di *bp.DataIndexer) {
	switch di.F() {
		default:
			return
	}
}

type ScreenState struct {
	Magic1 [3]byte `json:"magic1"` // 24bit
	ScreenPortion byte `json:"screen_portion"` // 8bit
	Magic2 [5]byte `json:"magic2"` // 40bit
	Pixels [256]byte `json:"pixels"` // 2048bit
}

// Number of bytes to serialize struct ScreenState
const BYTES_LENGTH_SCREEN_STATE uint32 = 265

func (m *ScreenState) Size() uint32 { return 265 }

// Returns string representation for struct ScreenState.
func (m *ScreenState) String() string {
	v, _ := jsonMarshal(m)
	return string(v)
}

// Encode struct ScreenState to bytes buffer.
func (m *ScreenState) Encode() []byte {
	ctx := bp.NewEncodeContext(int(m.Size()))
	m.BpProcessor().Process(ctx, nil, m)
	return ctx.Buffer()
}

func (m *ScreenState) Decode(s []byte) {
	ctx := bp.NewDecodeContext(s)
	m.BpProcessor().Process(ctx, nil, m)
}

func (m *ScreenState) BpProcessor() bp.Processor {
	fieldDescriptors := []*bp.MessageFieldProcessor{
		bp.NewMessageFieldProcessor(1, bp.NewArray(false, 3, bp.NewByte())),
		bp.NewMessageFieldProcessor(2, bp.NewByte()),
		bp.NewMessageFieldProcessor(3, bp.NewArray(false, 5, bp.NewByte())),
		bp.NewMessageFieldProcessor(4, bp.NewArray(false, 256, bp.NewByte())),
	}
	return bp.NewMessageProcessor(false, 2120, fieldDescriptors)
}

func (m *ScreenState) BpGetAccessor(di *bp.DataIndexer) bp.Accessor {
	switch di.F() {
	default:
		return nil  // Won't reached
	}
}

func (m *ScreenState) BpSetByte(di *bp.DataIndexer, lshift int, b byte) {
	switch di.F() {
		case 1:
			m.Magic1[di.I(0)] |= (byte(b) << lshift)
		case 2:
			m.ScreenPortion |= (byte(b) << lshift)
		case 3:
			m.Magic2[di.I(0)] |= (byte(b) << lshift)
		case 4:
			m.Pixels[di.I(0)] |= (byte(b) << lshift)
		default:
			return
	}
}

func (m *ScreenState) BpGetByte(di *bp.DataIndexer, rshift int) byte {
	switch di.F() {
		case 1:
			return byte(m.Magic1[di.I(0)] >> rshift)
		case 2:
			return byte(m.ScreenPortion >> rshift)
		case 3:
			return byte(m.Magic2[di.I(0)] >> rshift)
		case 4:
			return byte(m.Pixels[di.I(0)] >> rshift)
		default:
			return byte(0) // Won't reached
	}
}

func (m *ScreenState) BpProcessInt(di *bp.DataIndexer) {
	switch di.F() {
		default:
			return
	}
}